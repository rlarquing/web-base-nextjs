import Head from "next/head";
// import React, {useContext, useEffect} from "react";
// import {Context} from "../contexts";
// import {AdminMenu} from "./AdminMenu";
// import Link from "next/link";
// import {dashboard} from "../pages/dashboard/routers/dashboard.router";
// import {auth} from "../pages/auth/routers/auth.router";

import * as React from 'react';
import {styled, useTheme, Theme, CSSObject} from '@mui/material/styles';
import Box from '@mui/material/Box';
import MuiDrawer from '@mui/material/Drawer';
import MuiAppBar, {AppBarProps as MuiAppBarProps} from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import List from '@mui/material/List';
import CssBaseline from '@mui/material/CssBaseline';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';
import IconButton from '@mui/material/IconButton';
import MenuIcon from '@mui/icons-material/Menu';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import ChevronRightIcon from '@mui/icons-material/ChevronRight';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import {ReadMenu} from "../pages/api/menus/models/read-menu.model";
import {AccionesMenu} from "../localdb/menu";
import {db} from "../localdb/db";
import {useEffect, useState} from "react";
import Link from 'next/link';
import {Collapse, Icon} from "@mui/material";
import {ExpandLess, ExpandMore, StarBorder } from "@mui/icons-material";
import InboxIcon from '@mui/icons-material/MoveToInbox';
import DraftsIcon from '@mui/icons-material/Drafts';
import SendIcon from '@mui/icons-material/Send';


const drawerWidth = 240;

const openedMixin = (theme: Theme): CSSObject => ({
    width: drawerWidth,
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.enteringScreen,
    }),
    overflowX: 'hidden',
});

const closedMixin = (theme: Theme): CSSObject => ({
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    overflowX: 'hidden',
    width: `calc(${theme.spacing(7)} + 1px)`,
    [theme.breakpoints.up('sm')]: {
        width: `calc(${theme.spacing(8)} + 1px)`,
    },
});

const DrawerHeader = styled('div')(({theme}) => ({
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: theme.spacing(0, 1),
    // necessary for content to be below app bar
    ...theme.mixins.toolbar,
}));

interface AppBarProps extends MuiAppBarProps {
    open?: boolean;
}

const AppBar = styled(MuiAppBar, {
    shouldForwardProp: (prop) => prop !== 'open',
})<AppBarProps>(({theme, open}) => ({
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(['width', 'margin'], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    ...(open && {
        marginLeft: drawerWidth,
        width: `calc(100% - ${drawerWidth}px)`,
        transition: theme.transitions.create(['width', 'margin'], {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.enteringScreen,
        }),
    }),
}));

const Drawer = styled(MuiDrawer, {shouldForwardProp: (prop) => prop !== 'open'})(
    ({theme, open}) => ({
        width: drawerWidth,
        flexShrink: 0,
        whiteSpace: 'nowrap',
        boxSizing: 'border-box',
        ...(open && {
            ...openedMixin(theme),
            '& .MuiDrawer-paper': openedMixin(theme),
        }),
        ...(!open && {
            ...closedMixin(theme),
            '& .MuiDrawer-paper': closedMixin(theme),
        }),
    }),
);

export const AdminLayout = ({children, title}: any) => {
    // const {state, dispatch} = useContext(Context);
    // let userLogged: boolean = false;
    //     if (state.user){
    //         userLogged=state.user.isAutenticated;
    //     }
    // return (
    // <div>
    //     <Head>
    //         <title>App {title ? ` | ${title}` : ""}</title>
    //         <meta name="description" content="Generated by create next app"/>
    //         <link rel="icon" href="/favicon.ico"/>
    //     </Head>
    //     <nav className={style.nav}>
    //         <div>
    //             prueba
    //         </div>
    //
    //         <div></div>
    //     </nav>
    //     <AdminMenu userLogged={userLogged}/>
    //
    //     <div className={style.container}>{children}</div>
    // </div>
    // );


    const theme = useTheme();
    const [open, setOpen] = React.useState(true);
    const [openS, setOpenS] = React.useState(false);

    const handleClick = () => {
        setOpenS(!openS);
    };
    const handleDrawerOpen = () => {
        setOpenS(true);
    };

    const handleDrawerClose = () => {
        setOpen(false);
    };

    const [menus, setMenus] = useState([{} as ReadMenu]);

    useEffect(() => {
        const menu: AccionesMenu = new AccionesMenu(db);
        menu.getAll().then(res => {
            const filtrado: ReadMenu[] = res.filter((item: any) => (item.tipo === 'administracion'));
            setMenus(filtrado)
        });

    }, []);

    return <>
        <Head>
            <title>App {title ? ` | ${title}` : ""}</title>
            <meta name="description" content="Generated by create next app"/>
            <link rel="icon" href="/favicon.ico"/>
        </Head>
        <Box sx={{display: 'flex'}}>
            <CssBaseline/>
            <AppBar position="fixed" open={open}>
                <Toolbar>
                    <IconButton
                        color="inherit"
                        aria-label="open drawer"
                        onClick={handleDrawerOpen}
                        edge="start"
                        sx={{
                            marginRight: 5,
                            ...(open && {display: 'none'}),
                        }}
                    >
                        <MenuIcon/>
                    </IconButton>
                    <Typography variant="h6" noWrap component="div">
                        <Link href={'/administration'}>
                            Panel de administraci√≥n
                        </Link>
                    </Typography>
                </Toolbar>
            </AppBar>
            <Drawer variant="permanent" open={open}>
                <DrawerHeader>
                    <IconButton onClick={handleDrawerClose}>
                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}
                    </IconButton>
                </DrawerHeader>
                <Divider/>
                <List>
                    {menus.map((text, index) => (
                        <ListItem key={text.id} disablePadding sx={{display: 'block'}}>
                            <Link href={`${text.to}`} legacyBehavior>
                                <ListItemButton
                                    sx={{
                                        minHeight: 48,
                                        justifyContent: open ? 'initial' : 'center',
                                        px: 2.5,
                                    }}
                                >
                                    <ListItemIcon
                                        sx={{
                                            minWidth: 0,
                                            mr: open ? 3 : 'auto',
                                            justifyContent: 'center',
                                        }}
                                    >
                                        <Icon>{text.icon}</Icon>
                                    </ListItemIcon>
                                    <ListItemText primary={text.label} sx={{opacity: open ? 1 : 0}}/>
                                </ListItemButton>
                            </Link>
                        </ListItem>
                    ))}

                    <ListItemButton onClick={handleClick}>
                        <ListItemText primary="Seguridad" />
                        {openS ? <ExpandLess /> : <ExpandMore />}
                    </ListItemButton>
                    <Collapse in={openS} timeout="auto" unmountOnExit>
                        <List component="div" disablePadding>
                            <ListItemButton sx={{ pl: 4 }}>
                                <ListItemIcon>
                                    <StarBorder />
                                </ListItemIcon>
                                <ListItemText primary="Starred" />
                            </ListItemButton>
                        </List>
                    </Collapse >

                </List>
            </Drawer>
            <Box component="main" sx={{flexGrow: 1, p: 3}}>
                <DrawerHeader/>
                <div>{children}</div>
            </Box>
        </Box>
    </>;
}

AdminLayout.defaultProps = {
    title: 'Sin titulo',
}
